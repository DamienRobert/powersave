Buses:
- power/control:
    'auto' means device can be suspended
    'on' means can't be suspended
    'suspend' means suspend it
- power/autosuspend_delay_ms: non activity delay before suspend
- power/autosuspend: only for usb, like autosuspend_delay_ms but in seconds

The problem: on arch, usb/*/power/autosuspend is set to 2 (ie 2sec)
already, and usb/*/power/control is set to 'auto' for some devices, and
'on' for others. More generally, everything is set to 'auto', except all pci
devices set to 'on', and some scsi devices+usb devices set to on.
So putting everything back to 'on' for 'performance' is a bit of an
overkill, I leave everything to 'auto' except pci buses which are set ton
'on'.

Laptop Mode:
cf power.d/laptomode in pm-utils or https://www.kernel.org/doc/Documentation/laptops/laptop-mode.txt or http://www.cyrius.com/debian/nslu2/linux-on-flash.html:
# The kernel also has a setting known as laptop_mode, which makes it delay
# writes to disk (initially intended to allow laptop disks to spin down
# while not in use, hence the name). A number of files under /proc/sys/vm/
# controls how this works:
# - /proc/sys/vm/laptop_mode: How many seconds after a read should a
#   writeout of changed files start (this is based on the assumption
#   that a read will cause an otherwise spun down disk to spin up
#   again).
# - /proc/sys/vm/dirty_writeback_centisecs: How often the kernel
#   should check if there is "dirty" (changed) data to write out to
#   disk (in centiseconds).
# - /proc/sys/vm/dirty_expire_centisecs: How old "dirty" data
#   should be before the kernel considers it old enough to be
#   written to disk. It is in general a good idea to set this to
#   the same value as dirty_writeback_centisecs above.
# - /proc/sys/vm/dirty_ratio: The maximum amount of memory
#   (in percent) to be used to store dirty data before the
#   process that generates the data will be forced to write
#   it out. Setting this to a high value should not be a
#   problem as writeouts will also occur if the system is
#   low on memory.
# - /proc/sys/vm/dirty_background_ratio: The lower
#   amount of memory (in percent) where a writeout of
#   dirty data to disk is allowed to stop. This should
#   be quite a bit lower than the above dirty_ratio to
#   allow the kernel to write out chunks of dirty data
#   in one go.

Further settings:
- add (-a 2048) to HDPARM_OPTS to augment readahead
 (or use blockdev --setfra $readahead $disks)
 [default readahead on power is 256]
- Use mount -o remount,commit=600 / &> /dev/null to increase the interval of periodic commit? [30 seconds by default; works for ext[34] fs and btrfs]
For instance from https://github.com/intelfx/power-management
function handle_filesystems() {
  while read DEV MOUNT FSTYPE REST; do
    case "$FSTYPE" in
      ext3|ext4)
        echo "Configuring FS power-saving: $DEV [journal commit time: $COMMIT_TIME]"
        mount "$DEV" -o "remount,commit=$COMMIT_TIME"
        ;;
    esac
  done < /proc/mounts
}
