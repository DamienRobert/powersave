#!/bin/zsh
# vim: fdm=marker

case $1 in
	false)
		mode="performance"
		;;
	*)
		mode="powersave"
		;;
esac

#Helper functions {{{1
find_disks() {
	local disk
	for disk in /dev/sd?(N) /dev/hd?(N); do
		if udevadm info -q all -n $disk | egrep 'ID_BUS=(ata|scsi|ide)' >/dev/null; then
			disks+=($disk)
		fi
	done
}

find_netdevs() {
	local dev sysdir args
	sysdir="/sys/class/net"
	args=()
	for dev in $sysdir/*(N); do
		args+=$(basename $dev)
	done
	netdevs=()
	netdevs_eth=()
	netdevs_wlan=()
	for dev in $args; do
		netdevs+=($dev)
		[[ -e $sysdir/$dev/device ]] && [[ ! -e $sysdir/$dev/wireless ]] && netdevs_eth+=($dev)
		[[ -e $sysdir/$dev/wireless ]] && netdevs_wlan+=($dev)
	done
}

write_files() {
	value=$1
	if [[ -n $value ]]; then
		shift
		for file in $@; do
			[[ -w $file ]] && echo $value > $file
		done
	fi
}

# Powersave subfunctions {{{1
handle_bus() { #{{{2
	BUS_POWERCONTROL=${BUS_POWERCONTROL:-auto}
	case $mode in
		performance)
			USB_AUTOSUSPEND=${USB_AUTOSUSPEND:-2}
			SATA_ALPM=${SATA_ALPM:-max_performance}
			;;
		powersave)
			USB_AUTOSUSPEND=${USB_AUTOSUSPEND:-1}
			SATA_ALPM=${SATA_ALPM:min_power}
			;;
	esac
	# bus
	echo "Bus power control: $BUS_POWERCONTROL"
	write_files $BUS_POWERCONTROL $i /sys/bus/*/devices/*/power/control
	#scsi
	echo "Sata ALPM: $SATA_ALPM"
	write_files $SATA_ALPM /sys/class/scsi_host/host*/link_power_management_policy
	# usb autosuspend
	echo "Usb auto suspend: $USB_AUTOSUSPEND"
	write_files $USB_AUTOSUSPEND /sys/bus/usb/devices/*/power/autosuspend
}

handle_laptop_mode() { #{{{2
	[[ -z $SYSCTL_OPTS ]] &&
	case $mode in
		performance)
			#default arch linux settings
			SYSCTL_OPTS=(
				"vm.laptop_mode=0"
				"vm.dirty_writeback_centisecs=500"
				"vm.dirty_expire_centisecs=3000"
				"vm.dirty_ratio=20"
				"vm.dirty_background_ratio=10"
			)
			;;
		powersave)
			SYSCTL_OPTS=(
				"vm.laptop_mode=5"
				"vm.dirty_writeback_centisecs=60000"
				"vm.dirty_expire_centisecs=60000"
				"vm.dirty_ratio=90"
				"vm.dirty_background_ratio=1"
			)
			;;
	esac
	echo "sysctl -> $SYSCTL_OPTS"
	sysctl -e -w $SYSCTL_OPTS
}

handle_disks() { #{{{2
	case $mode in
		performance) # disabling power saving
			[[ -z $HDPARM_OPTS ]] && HDPARM_OPTS=(-S 0 -B 254)
			DISK_READAHEAD=${DISK_READAHEAD:-256}
			;;
		powersave)
			[[ -z $HDPARM_OPTS ]] && HDPARM_OPTS=(-S 120 -B 128) #-a 2048
			DISK_READAHEAD=${DISK_READAHEAD:-2048}
			;;
	esac
	# disks
	echo "hdparm $disks -> $HDPARM_OPTS"
	exec hdparm $HDPARM_OPTS $disks &
	echo "Disks readahead: $DISK_READAHEAD ($disks)"
	exec blockdev --setfram $DISK_READAHEAD $disks &
}

handle_cpu() { #{{{2
	CPU_GOVERNOR=${CPU_GOVERNOR:-Ondemand}
	case $mode in
		performance)
			CPU_PERFORMANCE_BIAS={CPU_PERFORMANCE_BIAS:-0}
			;;
		powersave)
			CPU_PERFORMANCE_BIAS={CPU_PERFORMANCE_BIAS:-15}
			;;
	esac
	echo "Cpu governor: $CPU_GOVERNOR; performance bias: $CPU_PERFORMANCE_BIAS"
	exec cpupower frequency-set -g $CPU_GOVERNOR &
	exec cpupower set -b $CPU_PERFORMANCE_BIAS &
}

handle_netdev{ #{{{2
	case $mode in
		performance)
			WLAN_POWERSAVE=${WLAN_POWERSAVE:-on}
			ETH_WOL=${ETH_WOL:-g}
			;;
		powersave)
			WLAN_POWERSAVE=${WLAN_POWERSAVE:-off}
			ETH_WOL=${ETH_WOL:-d}
			;;
	esac
	echo "iw powersave: $WLAN_POWERSAVE ($netdevs_wlan)"
	for wlan in $netdevs_wlan; do
		exec iw dev $wlan set power_save $WLAN_POWERSAVE &
	done
	echo "eth wol: $ETH_WOL ($netdevs_eth)"
	for eth in $netdevs_eth; do
		exec ethtool -s $eth wol $ETH_WOL &
	done
}

get_brightness() { #{{{2
	video=$2
	MAX_BRIGHTNESS=9
	[[ -r "$video/max_brightness" ]] && MAX_BRIGHTNESS=$(cat "$video/max_brightness")
	[[ -r "$video/brightness" ]] && CUR_BRIGHTNESS=$(cat "$video/brightness")
	case $mode in
		performance)
			BRIGHTNESS=$MAX_BRIGHTNESS
			[[ -n $CUR_BRIGHTNESS && $CUR_BRIGHTNESS -gt $BRIGHTNESS ]] && BRIGHTNESS=$CUR_BRIGHTNESS
		;;
		powersave)
			BRIGHTNESS=$(($MAX_BRIGHTNESS/3))
			[[ -n $CUR_BRIGHTNESS && $CUR_BRIGHTNESS -lt $BRIGHTNESS ]] && BRIGHTNESS=$CUR_BRIGHTNESS
		;;
	esac
}

handle_brightness() {
	for light in /sys/class/backlight/*; do
		get_brightness $light $i
		echo "$(basename $light)/brightness: $BRIGHTNESS"
		echo $BRIGHTNESS > "$light/brightness"
	done
}

handle_screen() { #{{{2
	echo "set screen dpms"
	case $mode in
		performance)
			XSET_DPMS={XSET_DPMS:-"-dpms"}
			[[ -z $XSET_DPMS_OPTIONS ]] && XSET_DPMS_OPTIONS=(0 0 0)
			;;
		powersave)
			XSET_DPMS={XSET_DPSM:-"+dpms"}
			[[ -z $XSET_DPMS_OPTIONS ]] && XSET_DPMS_OPTIONS=(0 0 120)
			;;
	esac
	echo "xset: $XSET_DPMS; xset dpsm: $XSET_DPMS_OPTIONS"
	exec xset $XSET_DPMS &
	exec xset dpms $XSET_DPMS_OPTIONS &
}

handle_video() { #{{{2
	case $mode in
		performance)
			PCIE_ASPM=${PCIE_ASPM:-default}
			;;
		powersave)
			PCIE_ASPM=${PCIE_ASPM:-powersave}
			;;
	esac
	# pcie
	echo "PCIE aspm: $PCIE_ASPM"
	write_files $PCIE_ASPM /sys/module/pcie_aspm/parameters/policy
}

handle_sound() { #{{{2
	SND_POWERCONTROL=${SND_POWERCONTROL:-Y}
	case $mode in
		performance)
			SND_POWERSAVE=${SND_POWERSAVE:-0}
			;;
		powersave)
			SND_POWERSAVE=${SND_POWERSAVE:-1}
			;;
	esac
	# sound card powersave
	echo "Sound powersave: $SND_POWERSAVE; Sound controller: $SND_POWERCONTROL"
	write_files $SND_POWERSAVE /sys/module/snd_*/parameters/power_save
	write_files $SND_POWERCONTROL /sys/module/snd_*/parameters/power_save_controller
}

handle_nmi() { #{{{2
	case $mode in
		performance)
			NMI_WATCHDOG=${NMI_WATCHDOG:-1}
			;;
		powersave)
			NMI_WATCHDOG=${NMI_WATCHDOG:-0}
			;;
	esac
	# nmi_watchdog
	echo "NMI watchdog: $NMI_WATCHDOG"
	write_files $NMI_WATCHDOG /proc/sys/kernel/nmi_watchdog
}

# Global powersave function {{{1
do_powersave() {
	handle_bus
	handle_laptop_mode
	handle_disks
	handle_cpu
	handle_netdev
	handle_brightness
	handle_screen
	handle_video
	handle_sound
	handle_nmi
	case $mode in
		performance)
			#Only restore the on status for pci devices...
			for i in /sys/bus/pci/devices/*/power/control; do echo on > $i; done
			#iwconfig wlan0 txpower on
			;;
	esac
}
#}}}1

powersave() {
	do_powersave $@
}
#to change powersave settings, just redefine powersave() and wrap around
#do_powersave if needed
[[ -r @ETC_DIR@/powersave.config ]] && . @ETC_DIR@/powersave.config

#only run if disks is not defined
#to have empty disks just set disks=() in pre_vars
if [[ -z ${disks+defined} ]]
	find_disks
fi
if [[ -z ${netdevs+defined} ]]
	find_netdevs
fi

powersave $@

exit 0
