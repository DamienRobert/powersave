#!/usr/bin/env zsh
# vim: fdm=marker

case $1 in
	false)
		mode="performance"
		;;
	*)
		mode="powersave"
		;;
esac

#Helper functions {{{1
. "@LIB_DIR@/find_dev.zsh"
. "@LIB_DIR@/powersave.zsh"

STATE_DIR="/var/run/powersave"
STATE_FILE="$STATE_DIR/state"
do_save_state() {
	mkdir -p $STATE_DIR
	{
		local sysdir setting
		echo "typeset -A init_vm"
		for setting in "laptop_mode" "dirty_writeback_centisecs" "dirty_expire_centisecs" "dirty_ratio" "dirty_background_ratio"; do
			echo "init_vm[$setting]=$(sysctl -n "vm.$setting")"
		done
		sysdir="/sys/module/i915/parameters"
		if [[ -d $sysdir ]]; then
			echo "INIT_VIDEO_POWERSAVE=$(cat $sysdir/powersave)"
			echo "INIT_I915_ENABLE_RC6=$(cat $sysdir/enable_rc6)"
			echo "INIT_I915_ENABLE_FBC=$(cat $sysdir/enable_fbc)"
			echo "INIT_I915_LVDS_DOWNCLOCK=$(cat $sysdir/lvds_downclock)"
		fi
		sysdir="/sys/devices/system/cpu/cpu0/cpufreq"
		if [[ -d $sysdir ]]; then
			echo "INIT_CPU_GOVERNOR=$(cat $sysdir/scaling_governor)"
		fi
	} >  $STATE_FILE
}
save_state() {
	do_save_state
}
load_state() {
	[[ -r $STATE_FILE ]] && . $STATE_FILE
}
status() {
	powersave_status > $STATE_DIR/init_powersave_status
}
save_and_load_state() {
	if [[ ! -e $STATE_FILE ]]; then
		first_call=t
		save_state
		status
	fi
	load_state
}

write_files() {
	local file value
	value=$1
	if [[ -n $value ]]; then
		shift
		for file in $@; do
			[[ -w $file ]] && echo -n $value > $file
		done
	fi
}

# Powersave subfunctions {{{1
handle_modules() { #{{{2
	if [[ -n $MODULES ]]; then
		echo "- Modules: $MODULES"
		case $mode in
			performance)
				#don't fork in case the other functions need the modules
				modprobe $MODULES
				;;
			powersave)
				modprobe -r $MODULES
				;;
		esac
	fi
}

handle_bus() { #{{{2
	BUS_POWERCONTROL=${BUS_POWERCONTROL:-auto}
	case $mode in
		performance)
			USB_AUTOSUSPEND=${USB_AUTOSUSPEND:-2}
			SATA_ALPM=${SATA_ALPM:-max_performance}
			;;
		powersave)
			USB_AUTOSUSPEND=${USB_AUTOSUSPEND:-1}
			SATA_ALPM=${SATA_ALPM:-min_power}
			;;
	esac
	# bus
	echo "- Bus power control: $BUS_POWERCONTROL"
	write_files $BUS_POWERCONTROL /sys/bus/*/devices/*/power/control
	#scsi
	echo "- Sata ALPM: $SATA_ALPM"
	write_files $SATA_ALPM /sys/class/scsi_host/host*/link_power_management_policy
	# usb autosuspend
	echo "- Usb auto suspend: $USB_AUTOSUSPEND"
	write_files $USB_AUTOSUSPEND /sys/bus/usb/devices/*/power/autosuspend
}

handle_sysctl() { #{{{2
	[[ -z $SYSCTL_OPTS ]] &&
	case $mode in
		performance)
			#default arch linux settings
			[[ -z $SYSCTL_OPTS ]] &&
			SYSCTL_OPTS=(
				"vm.laptop_mode=${init_vm[laptop_mode]:-0}"
				"vm.dirty_writeback_centisecs=${init_vm[dirty_writeback_centisecs]:-500}"
				"vm.dirty_expire_centisecs=${init_vm[dirty_expire_centisecs]:-3000}"
				"vm.dirty_ratio=${init_vm[dirty_ratio]:-20}"
				"vm.dirty_background_ratio=${init_vm[dirty_background_ratio]:-10}"
			)
			;;
		powersave)
			[[ -z $SYSCTL_OPTS ]] &&
			SYSCTL_OPTS=(
				"vm.laptop_mode=5"
				"vm.dirty_writeback_centisecs=60000"
				"vm.dirty_expire_centisecs=60000"
				"vm.dirty_ratio=90"
				"vm.dirty_background_ratio=1"
			)
			;;
	esac
	echo "- sysctl:"
	sysctl -e -w $SYSCTL_OPTS
}

handle_disks() { #{{{2
	case $mode in
		performance)
			[[ -z $HDPARM_OPTS ]] && HDPARM_OPTS=(-S 0 -B 254)
			DISK_READAHEAD=${DISK_READAHEAD:-256}
			;;
		powersave)
			[[ -z $HDPARM_OPTS ]] && HDPARM_OPTS=(-S 120 -B 128) #-a 2048
			DISK_READAHEAD=${DISK_READAHEAD:-2048}
			;;
	esac
	# disks
	[[ -n $DISK_READAHEAD ]] && HDPARM_OPTS+=(-a $DISK_READAHEAD)
	echo "- hdparm $HDPARM_OPTS $disks"
	hdparm $HDPARM_OPTS $disks
}

handle_cpu() { #{{{2
	#newer cpus are on powersave by default, older on Ondemand
	CPU_GOVERNOR=${CPU_GOVERNOR:-${INIT_CPU_GOVERNOR:-Ondemand}}
	case $mode in
		performance)
			CPU_PERFORMANCE_BIAS=${CPU_PERFORMANCE_BIAS:-0}
			;;
		powersave)
			CPU_PERFORMANCE_BIAS=${CPU_PERFORMANCE_BIAS:-15}
			;;
	esac
	echo "- Cpu governor: $CPU_GOVERNOR; performance bias: $CPU_PERFORMANCE_BIAS"
	cpupower frequency-set -g $CPU_GOVERNOR
	cpupower set -b $CPU_PERFORMANCE_BIAS
}

handle_netdev() { #{{{2
	WLAN_POWERSAVE=${WLAN_POWERSAVE:-on}
	case $mode in
		performance)
			ETH_WOL=${ETH_WOL:-g}
			;;
		powersave)
			ETH_WOL=${ETH_WOL:-d}
			;;
	esac
	echo "- iw powersave: $WLAN_POWERSAVE ($netdevs_wlan)"
	for wlan in $netdevs_wlan; do
		iw dev $wlan set power_save $WLAN_POWERSAVE
	done
	echo "- eth wol: $ETH_WOL ($netdevs_eth)"
	for eth in $netdevs_eth; do
		ethtool -s $eth wol $ETH_WOL
	done
}

handle_brightness() { #{{{2
	local light
	echo "- backlights: $backlights"
	for light in $backlights; do
		case $mode in
			performance)
				get_brightness --increase '$max_brightness' $light ;;
			powersave)
				get_brightness --decrease '$max_brightness/3' $light ;;
		esac
		echo "-> $(basename $light)/brightness: $brightness ($cur_brightness)"
		[[ -n $brightness ]] && write_files $brightness "$light/brightness"
	done
}

handle_screen() { #{{{2
	local disp
	echo "- set screen dpms"
	case $mode in
		performance)
			XSET_DPMS=${XSET_DPMS:-"-dpms"}
			[[ -z $XSET_DPMS_OPTIONS ]] && XSET_DPMS_OPTIONS=(0 0 0)
			;;
		powersave)
			XSET_DPMS=${XSET_DPSM:-"+dpms"}
			[[ -z $XSET_DPMS_OPTIONS ]] && XSET_DPMS_OPTIONS=(0 0 120)
			;;
	esac
	echo "-> xset: $XSET_DPMS; xset dpsm: $XSET_DPMS_OPTIONS [displays: $displays]"
	for disp in $displays; do
		DISPLAY=$disp xset $XSET_DPMS
		DISPLAY=$disp xset dpms $XSET_DPMS_OPTIONS
	done
}

handle_video() { #{{{2
	case $mode in
		performance)
			PCIE_ASPM=${PCIE_ASPM:-default}
			VIDEO_POWERSAVE=${VIDEO_POWERSAVE:-${INIT_VIDEO_POWERSAVE:-1}}
			I915_ENABLE_RC6=${INIT_I915_ENABLE_RC6:-${INIT_I915_ENABLE_RC6:-'-1'}}
			I915_ENABLE_FBC=${I915_ENABLE_FBC:-${INIT_I915_ENABLE_FBC:-'-1'}}
			I915_LVDS_DOWNCLOCK=${I915_LVDS_DOWNCLOCK:-${INIT_I915_LVDS_DOWNCLOCK:-0}}
			;;
		powersave)
			PCIE_ASPM=${PCIE_ASPM:-powersave}
			VIDEO_POWERSAVE=${VIDEO_POWERSAVE:-1}
			I915_ENABLE_RC6=${I915_ENABLE_RC6:-3}
			I915_ENABLE_FBC=${I915_ENABLE_FBC:-1}
			I915_LVDS_DOWNCLOCK=${I915_LVDS_DOWNCLOCK:-1}
			;;
	esac
	# pcie
	echo "- PCIE aspm: $PCIE_ASPM"
	write_files $PCIE_ASPM /sys/module/pcie_aspm/parameters/policy
	local sysdir
	sysdir="/sys/module/i915/parameters"
	if [[ -d $sysdir ]]; then
		echo "- i915 -> powersave: $VIDEO_POWERSAVE; rc6: $I915_ENABLE_RC6; fbc: $I915_ENABLE_FBC; lvds_downclock: $I915_LVDS_DOWNCLOCK"
		write_files $VIDEO_POWERSAVE $sysdir/powersave
		write_files $I915_ENABLE_RC6 $sysdir/enable_rc6
		write_files $I915_ENABLE_FBC $sysdir/enable_fbc
		write_files $I915_LVDS_DOWNCLOCK $sysdir/lvds_downclock
	fi
}

handle_sound() { #{{{2
	SND_POWERCONTROL=${SND_POWERCONTROL:-Y}
	case $mode in
		performance)
			SND_POWERSAVE=${SND_POWERSAVE:-0}
			;;
		powersave)
			SND_POWERSAVE=${SND_POWERSAVE:-1}
			;;
	esac
	# sound card powersave
	echo "- Sound powersave: $SND_POWERSAVE; Sound controller: $SND_POWERCONTROL"
	write_files $SND_POWERSAVE /sys/module/snd_*/parameters/power_save
	write_files $SND_POWERCONTROL /sys/module/snd_*/parameters/power_save_controller
}

handle_nmi() { #{{{2
	case $mode in
		performance)
			NMI_WATCHDOG=${NMI_WATCHDOG:-1}
			;;
		powersave)
			NMI_WATCHDOG=${NMI_WATCHDOG:-0}
			;;
	esac
	# nmi_watchdog
	echo "- NMI watchdog: $NMI_WATCHDOG"
	write_files $NMI_WATCHDOG /proc/sys/kernel/nmi_watchdog
}

restore_pci_control() { #{{{2
	#Only restore the on status for pci devices
	for i in /sys/bus/pci/devices/*/power/control; do echo on > $i; done
}

# Global powersave function {{{1
test_firstcall() {
	if [[ -n $first_call && $mode == "performance" ]]; then
		echo "First call (performance)"
		do_powerperformance_firsttime
		exit 0
	fi
}
do_powerperformance_firsttime() {
	handle_brightness
}
do_powersave() {
	test_firstcall
	case $mode in
		performance)
			handle_modules #at beginning
			;;
	esac
	handle_bus
	handle_sysctl
	handle_disks
	handle_cpu
	handle_netdev
	handle_brightness
	handle_screen
	handle_video
	handle_sound
	handle_nmi
	case $mode in
		performance)
			restore_pci_control
			;;
		powersave)
			handle_modules #at end
			;;
	esac
}
#}}}1

powersave() {
	do_powersave $@
}
#to change powersave settings, just redefine powersave() and wrap around
#do_powersave if needed
[[ -r @ETC_DIR@/powersave.config ]] && . @ETC_DIR@/powersave.config

#only run if disks is not defined
#to have empty disks just set disks=() in pre_vars
if [[ -z ${disks+defined} ]]; then
	find_disks --sata
fi
if [[ -z ${netdevs+defined} ]]; then
	find_netdevs
fi
if [[ -z ${backlights+defined} ]]; then
	find_backlights
fi
if [[ -z ${displays+defined} ]]; then
	find_displays
fi

save_and_load_state
powersave $@

exit 0
