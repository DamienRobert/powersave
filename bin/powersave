#!/bin/zsh

find_disks() {
	local disk
	for disk in /dev/sd?(N) /dev/hd?(N); do
		if udevadm info -q all -n $disk | egrep 'ID_BUS=(ata|scsi|ide)' >/dev/null; then
			disks+=($disk)
		fi
	done
}

find_netdevs() {
	local dev sysdir args
	sysdir="/sys/class/net"
	args=()
	for dev in $sysdir/*(N); do
		args+=$(basename $dev)
	done
	netdevs=()
	netdevs_eth=()
	netdevs_wlan=()
	for dev in $args; do
		netdevs+=($dev)
		[[ -e $sysdir/$dev/device ]] && [[ ! -e $sysdir/$dev/wireless ]] && netdevs_eth+=($dev)
		[[ -e $sysdir/$dev/wireless ]] && netdevs_wlan+=($dev)
	done
}

write_files() {
	value=$1
	if [[ -n $value ]]; then
		shift
		for file in $@; do
			[[ -w $file ]] && echo $value > $file
		done
	fi
}

get_brightness() {
	video=$2
	MAX_BRIGHTNESS=9
	[[ -r "$video/max_brightness" ]] && MAX_BRIGHTNESS=$(cat "$video/max_brightness")
	[[ -r "$video/brightness" ]] && CUR_BRIGHTNESS=$(cat "$video/brightness")
	case $1 in
		false)
			BRIGHTNESS=$MAX_BRIGHTNESS
			[[ -n $CUR_BRIGHTNESS && $CUR_BRIGHTNESS -gt $BRIGHTNESS ]] && BRIGHTNESS=$CUR_BRIGHTNESS
		;;
		true)
			BRIGHTNESS=$(($MAX_BRIGHTNESS/3))
			[[ -n $CUR_BRIGHTNESS && $CUR_BRIGHTNESS -lt $BRIGHTNESS ]] && BRIGHTNESS=$CUR_BRIGHTNESS
		;;
	esac
}

handle_laptop_mode() {
	case $1 in
		false)
			#default arch linux settings
			SYSCTL_OPTS=(
				"vm.laptop_mode=0"
				"vm.dirty_writeback_centisecs=500"
				"vm.dirty_expire_centisecs=3000"
				"vm.dirty_ratio=10"
				"vm.dirty_background_ratio=5"
			)
			;;
		*)
			SYSCTL_OPTS=(
				"vm.laptop_mode=5"
				"vm.dirty_writeback_centisecs=60000"
				"vm.dirty_expire_centisecs=60000"
				"vm.dirty_ratio=90"
				"vm.dirty_background_ratio=1"
			)
			;;
	esac
	echo "sysctl -> $SYSCTL_OPTS"
	sysctl -e -w $SYSCTL_OPTS
}

handle_disks() {
	case $1 in
		false) # disabling power saving
			HDPARM_OPTS=(-S 0 -B 254)
			;;
		*)
			HDPARM_OPTS=(-S 120 -B 128) #-a 2048
			;;
	esac
	# disks
  echo "hdparm $disks -> $HDPARM_OPTS"
	exec hdparm $HDPARM_OPTS $disks &
}

handle_cpu() {
	CPU_GOVERNOR="Ondemand"
	echo "Cpu governor: $CPU_GOVERNOR"
	exec cpupower frequency-set -g $CPU_GOVERNOR &
}

handle_netdev{
	case $1 in
		false)
			WLAN_OPTS=(set power_save off)
			;;
		*)
			WLAN_OPTS=(set power_save on)
			;;
	esac
	echo "iw $netdevs_wlan -> $WLAN_OPTS"
	for wlan in $netdevs_wlan; do
		exec iw dev $wlan $WLAN_OPTS &
	done
}

handle_screen() {
	echo "set screen dpms"
	case $1 in
		false)
			exec xset -dpms &
			exec xset dpms 0 0 0 &
			;;
		*)
			exec xset +dpms &
			exec xset dpms 0 0 120 &
			;;
	esac
}

orig_vars() {
	#only run if disks is not defined
	#to have empty disks just set disks=() in pre_vars
	if [[ -z ${disks+defined} ]]
		find_disks
	fi
	if [[ -z ${netdevs+defined} ]]
		find_netdevs
	fi

	BUS_POWERCONTROL="auto"
	SND_POWERCONTROL="Y"

	case $1 in
		false)
			USB_AUTOSUSPEND="2"
			NMI_WATCHDOG="1"
			PCIE_ASPM="default"
			SATA_ALPM="max_performance"
			SND_POWERSAVE="0"
			;;
		*) # Enable power saving settings on battery
			USB_AUTOSUSPEND="1"
			NMI_WATCHDOG="0"
			PCIE_ASPM="default"
			SATA_ALPM="min_power"
			SND_POWERSAVE="1"
esac
}

orig_powersave() {
	#brightness
	for i in /sys/class/backlight/*; do
		get_brightness $1 $i
		echo "$(basename $i)/brightness: $BRIGHTNESS"
		echo $BRIGHTNESS > "$i/brightness"
	done
	# bus
  echo "Bus power control: $BUS_POWERCONTROL"
	write_files $BUS_POWERCONTROL $i /sys/bus/*/devices/*/power/control
	#scsi
	echo "Sata ALPM: $SATA_ALPM"
	write_files $SATA_ALPM /sys/class/scsi_host/host*/link_power_management_policy
	# usb autosuspend
	echo "Usb auto suspend: $USB_AUTOSUSPEND"
	write_files $USB_AUTOSUSPEND /sys/bus/usb/devices/*/power/autosuspend
	# nmi_watchdog
  echo "NMI watchdog: $NMI_WATCHDOG"
	write_files $NMI_WATCHDOG /proc/sys/kernel/nmi_watchdog
	# pcie
	echo "PCIE aspm: $PCIE_ASPM"
	write_files $PCIE_ASPM /sys/module/pcie_aspm/parameters/policy
	# sound card powersave
  echo "Sound powersave: $SND_POWERSAVE; Sound controller: $SND_POWERCONTROL"
	write_files $SND_POWERSAVE /sys/module/snd_*/parameters/power_save
	write_files $SND_POWERCONTROL /sys/module/snd_*/parameters/power_save_controller

	case $1 in
		false)
			#Only restore the on status for pci devices...
			for i in /sys/bus/pci/devices/*/power/control; do echo on > $i; done
			#iwconfig wlan0 txpower on
			;;
	esac
}

vars() {
	orig_vars $@
}

powersave() {
	orig_powersave $@
}

#to change powersave settings, just redefine vars() and powersave() and
#wrap around orig_vars and orig_powersave if needed
[[ -r @ETC_DIR@/powersave.config ]] && . @ETC_DIR@/powersave.config

vars $@
powersave $@

exit 0
