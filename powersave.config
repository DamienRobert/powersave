#vim: ft=zsh
DISKS=(/dev/sda)
wlan=wlan0

#power/control: auto means device can be suspended, on means can't be suspended, suspend means suspend it
#power/autosuspend_delay_ms: non activity delay before suspend
#power/autosuspend: only for usb, like autosuspend_delay_ms but in seconds

#the problem: on arch, usb/*/power/autosuspend is set to 2 (ie 2sec)
#already, and usb/*/power/control is set to auto for some devices, and on
#for others more generally, everything is set to auto, except all pci
#devices set to on, and some scsi devices+usb devices set to on #so putting
#everything back on on is a bit of an overkill...

init() {
  BUSPOWERCONTROL="auto"
  SND_POWERSAVECTRL="Y"
  MAX_BRIGHTNESS=9
  [ -r /sys/class/backlight/acpi_video0/max_brightness ] && MAX_BRIGHTNESS=$(cat /sys/class/backlight/acpi_video0/max_brightness)

  case $1 in
    true) # Enable power saving settings on battery
  USBAUTOSUSPEND="1"
  NMIWATCHDOG="0"
  CPUGOVERNOR="Ondemand"
  PCIE_ASPM="default"
  LAPTOP_MODE="5"

  VMDIRTY_RATIO="90"
  VMDIRTY_BACKGROUND="1"
  VMDIRTY_EXPIRE="60000"
  VMDIRTY_WRITE="60000"
  #cf power.d/laptomode pour une explication
  #http://www.cyrius.com/debian/nslu2/linux-on-flash.html
  #     The kernel also has a setting known as laptop_mode, which makes it delay
  #     writes to disk (initially intended to allow laptop disks to spin down
  #     while not in use, hence the name). A number of files under /proc/sys/vm/
  #     controls how this works:
  #    /proc/sys/vm/laptop_mode: How many seconds after a read should a
  #    writeout of changed files start (this is based on the assumption
  #    that a read will cause an otherwise spun down disk to spin up
  #    again).
  #    /proc/sys/vm/dirty_writeback_centisecs: How often the kernel
  #    should check if there is "dirty" (changed) data to write out to
  #    disk (in centiseconds).
  #    /proc/sys/vm/dirty_expire_centisecs: How old "dirty" data
  #    should be before the kernel considers it old enough to be
  #    written to disk. It is in general a good idea to set this to
  #    the same value as dirty_writeback_centisecs above.
  #    /proc/sys/vm/dirty_ratio: The maximum amount of memory
  #    (in percent) to be used to store dirty data before the
  #    process that generates the data will be forced to write
  #    it out. Setting this to a high value should not be a
  #    problem as writeouts will also occur if the system is
  #    low on memory.
  #    /proc/sys/vm/dirty_background_ratio: The lower
  #    amount of memory (in percent) where a writeout of
  #    dirty data to disk is allowed to stop. This should
  #    be quite a bit lower than the above dirty_ratio to
  #    allow the kernel to write out chunks of dirty data
  #    in one go.

  HDPARM=(-S 120 -B 128) #-a 2048
  SCSI_LINKPOWER="min_power"
  SND_POWERSAVE="1"
  WLAN_MODE=(set power_save on)
  BRIGHTNESS=$(($MAX_BRIGHTNESS/3))
  XSET_MODE=("+dpms")
  DPMS=(0 0 120)
  ;;
    false) # disabling power saving
  USBAUTOSUSPEND="2"
  NMIWATCHDOG="1"
  CPUGOVERNOR="Ondemand"
  PCIE_ASPM="default"
  LAPTOP_MODE="0"
  #default arch linux settings
  VMDIRTY_RATIO="20" #30
  VMDIRTY_BACKGROUND="10" #30
  VMDIRTY_EXPIRE="3000" #600
  VMDIRTY_WRITE="500" #600
  HDPARM=(-S 0 -B 254) #-a 2048
  SCSI_LINKPOWER="max_performance"
  SND_POWERSAVE="0"
  WLAN_MODE=(set power_save off)
  BRIGHTNESS=$MAX_BRIGHTNESS
  XSET_MODE=("-dpms")
  DPMS=(0 0 0)
  ;;
esac
}

post() { 
  case $1 in
    false)
      #i only restore the on status for pci devices...
      for i in /sys/bus/pci/devices/*/power/control; do echo on > $i; done
      iwconfig wlan0 txpower on
      ;;
  esac
}
