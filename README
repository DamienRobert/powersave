This is a powersave script for Linux. Initially, I've created it for my own laptop. That means that this script will NOT work on any setup so please CHECK this before running it on your computer! Things might break otherwise and I will NOT be responsible for any damage that has been done. This script gives me roughly 1:30/2:00 hours of battery life, on a battery that would otherwise last ~45 minutes. (yea, I know, my battery is fried)

The script will need the following dependencies to run:
1. hdparm
2. wireless_tools
3. xset
4. udev

This script has to be placed in /usr/bin and when done so, one can run powersave true|false and the powersaving will kick in. I have also made a udev rule that will automatically run these commands depending on battery state (Charging, discharging).
I have placed all the available powersave options in the script, except for:
- HAL CD polling; HAL is deprecated software and as such, I don't use it. I have not found another way to disable CD polling yet, but perhaps this is not even necessary anymore?

Things you should edit, should you use this on your setup:
* NMI watchdog; I have this disabled at kernel level. If you don't, then uncomment the line in the powersave script. This option is safe to do! Should you want to disable this at kernel level too, use: nmi_watchdog=0
* ASPM powersave; this option is safe! To be able to write to this file you have to use a kernel parameter at boot: pcie_aspm=force
* Disk powersave; as I have only one HDD (laptop), I have edited the wildcard that Taylorchu originally uses. If you have multiple HDD's and want run powersave on all of them, then use this:
	// for dev in $(awk '/^\/dev\/sd/ {print $1}' /etc/mtab); do hdparm -S 6 -B 254 -a 2048 $dev; done
Also, note that I use -B254. I hate the clicking noises my HDD would make otherwise, but this is not power-efficient. If you want maximum powersave, use -B1.
**THIS CAN HURT YOUR HARDDRIVE, SO BE CAREFUL.**
* Screen powersave; this option is safe! The numbers of brightness differ per manufacturer. You should check yours. Do so by setting your screen on maximum brightness and then running: cat/sys/class/backlight/acpi_video*/brightness
Then, lookup the false) part in the script and change the value. Mine is set to 9.


## Changes
You can read about the original version of statnot [here](http://www.github.com/halhen/statnot).
This version aims to reduce the dependency upon external libs, and to centralize
the customization of the script into one file. To that end I have removed the
usage of the external script, in favor of editing the source code directly. I
have added a convienance class called Info that grabs some information that one
would normally want in a statusbar. I intend to also remove the external
dependency upon xsetroot, but am having a hard time debugging this path at the
moment.

## Usage
To use this version of statnot, you'll need to modify the function
get\_statustext()  and change what is assigned to output. 

##TODO
* Remove dependence upon xsetroot using xlib. (Currently, this works until a
notification is received, which raises an error in Xlib's
window.change\_property())

* Add more generic information gathering. (Currently, it's very specific to my
machine. It'd be simple to add more functions to Info or modify the ones that
are there)
